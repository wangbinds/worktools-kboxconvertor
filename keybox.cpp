// Class automatically generated by Dev-C++ New Class wizard
#include <cstring>
#include "keybox.h" // class's header file

// class constructor
Keybox::Keybox()
{
	// insert your code here
	memset(mDeviceID, 0, DEVICEID_SIZE_IN_KEYBOX);
	memset(mKey, 0, KEY_LENGTH);
	memset(mID, 0, ID_LENGTH);
	memset(mMagic, 0, MAGIC_LENGTH);
	memset(mCRC, 0, CRC_LENGTH);
}

Keybox::Keybox(const char* xml)
{
    init(xml);
}

// class destructor
Keybox::~Keybox()
{
	// insert your code here
}

void Keybox::init(const char* xml)
{
     memcpy(mDeviceID, xml+DEVICEID_OFFSET, DEVICEID_LENGTH);
     memcpy(mKey, xml+KEY_OFFSET, KEY_LENGTH);
     memcpy(mID, xml+ID_OFFSET, ID_LENGTH);
     memcpy(mMagic, xml+MAGIC_OFFSET, MAGIC_LENGTH);
     memcpy(mCRC, xml+CRC_OFFSET, CRC_LENGTH);
}

int Keybox::convertToCsv(char* out)
{
    int i;
    //convert DeviceID
    char high, low;
    for(i = 0; i<DEVICEID_SIZE_IN_KEYBOX; i++)
    {
        charToHex(mDeviceID[i], &high, &low);
        *(out+0) = high;
        *(out+1) = low;
        *(out+2) = ' ';
        out += 3;
    }
    //convert KEY
    for(i = 0; i<KEY_LENGTH; i += 2)
    {
        *(out+0) = mKey[i+0];
        *(out+1) = mKey[i+1];
        *(out+2) = ' ';
        out += 3;
    }
    //convert ID
    for(i = 0; i<ID_LENGTH; i += 2)
    {
        *(out+0) = mID[i+0];
        *(out+1) = mID[i+1];
        *(out+2) = ' ';
        out += 3;
    }
    //convert MAGIC
    for(i = 0; i<MAGIC_LENGTH; i += 2)
    {
        *(out+0) = mMagic[i+0];
        *(out+1) = mMagic[i+1];
        *(out+2) = ' ';
        out += 3;
    }
    //convert CRC
    for(i = 0; i<CRC_LENGTH; i += 2)
    {
        *(out+0) = mCRC[i+0];
        *(out+1) = mCRC[i+1];
        *(out+2) = ' ';
        out +=3;
    }
    //add \r\n charactor to the end
    *out = '\r';
    out += 1;
    *out = '\n';
    
    return 386;
}

void Keybox::charToHex(char src, char* high, char* low)
{
     int temp;
     temp = src & 0x0f;
     if(temp > 9)
         *low = temp + 'a' - 10;
     else
         *low = temp + '0';
     
     temp = src >> 4;
     temp &= 0x0f;
     if(temp > 9)
         *high = temp + 'a' - 10;
     else
         *high = temp + '0';
}

void Keybox::getDeviceID(char* deviceID)
{
    memcpy(deviceID, mDeviceID, DEVICEID_SIZE_IN_KEYBOX);
}
